const yup = require('yup')
const normalizeUrl = require('normalize-url')
const HashId = require('hashids/cjs')

// We basically want to strip out EVERYTHING and only look at what comprises the base URL,
// aka the hostname. We're taking this approach rather than using the url module from node,
// because this also needs to run in the frontend.
// Ah, the pains of having to run shit cross-platform...
const ROOT_DOMAIN = normalizeUrl(process.env.REACT_APP_BASE_URL, {
  stripAuthentication: true,
  stripHash: true,
  stripProtocol: true,
  stripWWW: true
})
// **DO NOT** change minLength, as that will CHANGE the hash function,
// meaning your links will NO LONGER be readable!!!
const HASH_ID_MIN_LENGTH = 4
const HASH_ID_MAX_LENGTH = Number(process.env.REACT_APP_HASH_MAX_LENGTH)
const hashFn = new HashId(ROOT_DOMAIN, HASH_ID_MIN_LENGTH)

const linkSchema = yup.object().shape({
  id: yup.string(),
  customId: yup
    .string()
    .min(HASH_ID_MIN_LENGTH)
    .max(HASH_ID_MAX_LENGTH)
    .test('check-hash-conflict', 'Cannot use this URL', customId => {
      // Since custom and auto-generated hash are both mounted under /,
      // we need to check that custom hash CAN'T clash with autogenerated hash.
      let ids
      try {
        ids = hashFn.decode(customId)
      } catch (err) {} // when the hash contains "invalid" characters, we know for sure it CAN'T clash.
      return !(ids && ids.length)
    }),
  originalUrl: yup
    .string()
    .transform(originalUrl =>
      normalizeUrl(originalUrl, {
        forceHttps: true,
        stripAuthentication: true,
        stripWWW: true
      })
    )
    .url() // this check is here for the backend, who won't run transformations
    .test(
      'prevent-redirect-loop',
      `Cannot shorten ${ROOT_DOMAIN} URLs`,
      url => !url.includes(ROOT_DOMAIN)
    )
    .required(),
  meta: yup.object().shape({
    author: yup.string(),
    date: yup.date(),
    description: yup.string(),
    lang: yup.string(),
    logo: yup.string().url(),
    publisher: yup.string(),
    title: yup.string()
  })
})

module.exports = {
  default: linkSchema,
  linkSchema,
  ROOT_DOMAIN,
  hashFn
}
